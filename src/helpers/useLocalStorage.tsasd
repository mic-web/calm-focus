import React from 'react'

/**
 * Custom React hook for saving to local storage and reading from it
 *
 * @param {string} key - The key of the local storage entry
 * @param {T?} defaultValue - The default value to return when storage is empty
 */

const useLocalStorage = <T>(key: string, parser?: (v: string | null => T)): [T | null, (value: T) => void] => {
  // State to store our value

  const [storedValue, setStoredValue] = React.useState<T | null>(() => {
    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : defaultValue
    } catch (error) {
      console.log(error)
      throw error
    }
  })

  // Return a wrapped version of useState's setter function that
  // persists the new value to localStorage.
  const setValue = (value: T) => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore = value instanceof Function ? value(value) : value

      setStoredValue(valueToStore)

      window.localStorage.setItem(key, JSON.stringify(valueToStore))
    } catch (error) {
      console.log(error)
      throw error
    }
  }

  return [storedValue, setValue]
}

export default useLocalStorage
